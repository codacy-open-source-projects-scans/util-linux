#!/bin/bash
#
# Copyright (C) 2022 Masatake YAMATO <yamato@redhat.com>
#
# This file is part of util-linux.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
TS_TOPDIR="${0%/*}/../.."
TS_DESC="UNIX dgram sockets"

. "$TS_TOPDIR"/functions.sh
ts_init "$*"

. "$TS_SELF/lsfd-functions.bash"
ts_check_test_command "$TS_CMD_LSFD"
ts_check_test_command "$TS_HELPER_MKFDS"

ts_cd "$TS_OUTDIR"

PID=
FDS=3
FDC=4
EXPR='(TYPE == "UNIX") and ((FD == 3) or (FD == 4))'

make_state_connected()
{
    # The first one is for rewriting NAME column.
    # The second one is for rewriting STATE column.
    lsfd_make_state_connected | sed -e 's/unconnected/connected/'
}

ts_init_subtest "non-abstract"
{
    coproc MKFDS { "$TS_HELPER_MKFDS" unix-dgram $FDS $FDC \
				      path=test_mkfds-unix-dgram ; }
    if read -r -u "${MKFDS[0]}" PID; then
	${TS_CMD_LSFD} -n \
		       -r \
		       -o ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH \
		       -p "${PID}" -Q "${EXPR}" | make_state_connected
	echo 'ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH': ${PIPESTATUS[0]}

	echo DONE >&"${MKFDS[1]}"
    fi
    wait "${MKFDS_PID}"
} > "$TS_OUTPUT" 2>&1
ts_finalize_subtest

ts_init_subtest "abstract"
{
    coproc MKFDS { "$TS_HELPER_MKFDS" unix-dgram $FDS $FDC \
				      path=test_mkfds-unix-dgram \
				      abstract=true ; }
    if read -r -u "${MKFDS[0]}" PID; then
	${TS_CMD_LSFD} -n \
		       -r \
		       -o ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH \
		       -p "${PID}" -Q "${EXPR}" | make_state_connected
	echo 'ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH': $?

	echo DONE >&"${MKFDS[1]}"
    fi
    wait "${MKFDS_PID}"
} > "$TS_OUTPUT" 2>&1
ts_finalize_subtest

ts_init_subtest "ENDPOINTS-column"
if ! lsfd_check_sockdiag --subtest unix; then
    # lsfd_check_sockdiag calls ts_skip_subtest or ts_failed_subtest.
    :
elif ts_is_in_docker; then
    ts_skip_subtest "unsupported in docker environment"
else
    {
	coproc MKFDS { "$TS_HELPER_MKFDS" unix-dgram $FDS $FDC \
					  path=test_mkfds-unix-dgram \
					  abstract=true ; }

	if read -r -u "${MKFDS[0]}" PID; then
	    endpoint_c=$(${TS_CMD_LSFD} -n -r -Q "PID == ${PID} && FD == $FDC" -o ENDPOINTS)
	    echo endpoint_c: $?

	    test "$endpoint_c" = "${PID},test_mkfds,${FDS}rw"
	    echo "endpoint_c == PID,test_mkfs,${FDS}rw:" $?

	    endpoint_s=$(${TS_CMD_LSFD} -n -r -Q "PID == ${PID} && FD == $FDS" -o ENDPOINTS)
	    echo endpoint_s: $?

	    test "$endpoint_s" = "${PID},test_mkfds,${FDC}rw"
	    echo "endpoint_s == PID,test_mkfs,${FDC}rw:" $?

	    echo DONE >&"${MKFDS[1]}"
	fi
	wait "${MKFDS_PID}"
    } > "$TS_OUTPUT" 2>&1
    ts_finalize_subtest
fi

ts_init_subtest "UNIX.IPEEER-column"
if ! lsfd_check_sockdiag --subtest unix; then
    # lsfd_check_sockdiag calls ts_skip_subtest or ts_failed_subtest.
    :
elif ts_is_in_docker; then
    ts_skip_subtest "unsupported in docker environment"
else
    {
	coproc MKFDS { "$TS_HELPER_MKFDS" unix-dgram $FDS $FDC \
					  path=test_mkfds-unix-dgram \
					  abstract=true ; }

	if read -r -u "${MKFDS[0]}" PID; then
	    inode_s=$(${TS_CMD_LSFD} -n -r -p "${PID}" -Q "FD == $FDS" -o INODE)
	    echo inode_s: $?
	    inode_c=$(${TS_CMD_LSFD} -n -r -p "${PID}" -Q "FD == $FDC" -o INODE)
	    echo inode_c: $?

	    ipeer_s=$(${TS_CMD_LSFD} -n -r -p "${PID}" -Q "FD == $FDS" -o UNIX.IPEER)
	    echo ipeer_s: $?

	    ipeer_c=$(${TS_CMD_LSFD} -n -r -p "${PID}" -Q "FD == $FDC" -o UNIX.IPEER)
	    echo ipeer_c: $?

	    test "$ipeer_s" = 0
	    echo "ipeer_s == 0:" $?

	    test "$ipeer_c" = "$inode_s"
	    echo "ipeer_s == inode_s:" $?

	    echo DONE >&"${MKFDS[1]}"
	fi
	wait "${MKFDS_PID}"
    } > "$TS_OUTPUT" 2>&1
    ts_finalize_subtest
fi

ts_finalize
